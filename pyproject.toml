[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["api"]

[project]
name = "sports-organisation-management-system"
version = "0.1.0"
description = "A comprehensive web application for managing sports organizations, competitions, teams, players, and games"
readme = "README.md"
requires-python = ">=3.8.1"
license = {text = "MIT"}
authors = [
    {name = "Sports Org Management Team"}
]
keywords = ["sports", "management", "flask", "api", "competition"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Flask",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

dependencies = [
    # Web framework
    "flask>=3.0.0",
    "flask-cors>=4.0.0",

    # Database ORM (TODO: Replace with Prisma client in future)
    "sqlalchemy>=2.0.23",
    "psycopg2-binary>=2.9.9",
    "alembic>=1.13.1",

    # Data serialization
    "marshmallow>=3.20.1",
    "marshmallow-sqlalchemy>=0.29.0",
    "pydantic>=2.4.2",

    # Environment management
    "python-dotenv>=1.0.0",

    # Date/time utilities
    "python-dateutil>=2.8.2",

    # HTTP client
    "requests>=2.31.0",

    # Type hints
    "typing-extensions>=4.8.0",

    # Authentication (for future Auth0 integration)
    "python-jose[cryptography]>=3.3.0",

    # WSGI server for production
    "gunicorn>=21.2.0",
]

[project.optional-dependencies]
dev = [
    # Code formatting and linting
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
]

test = [
    # Testing framework
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.11.1",
    "pytest-cov>=4.1.0",
    "pytest-flask>=1.3.0",

    # Test data generation
    "factory-boy>=3.3.0",
    "faker>=19.12.0",

    # Coverage reporting
    "coverage>=7.3.0",

    # HTTP testing
    "requests-mock>=1.11.0",
]

all = [
    "sports-organisation-management-system[dev,test]"
]

[project.urls]
Homepage = "https://github.com/nkasozi/SportsOrganisationManagementSystem"
Repository = "https://github.com/nkasozi/SportsOrganisationManagementSystem"
Issues = "https://github.com/nkasozi/SportsOrganisationManagementSystem/issues"

[tool.setuptools]
packages = ["api"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["api", "tests"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--cov=api",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
    "--strict-markers",
    "--disable-warnings"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Tests that take a long time to run",
    "api: API endpoint tests",
    "service: Service layer tests",
    "repository: Repository layer tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["api"]
omit = [
    "tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/alembic/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
